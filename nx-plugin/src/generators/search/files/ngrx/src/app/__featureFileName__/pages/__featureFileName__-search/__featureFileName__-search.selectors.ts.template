import { createSelector } from '@ngrx/store';
import { RowListGridData, DataTableColumn } from '@onecx/portal-integration-angular';
import { createChildSelectors } from '@onecx/ngrx-accelerator';
import { selectQueryParams } from 'src/app/shared/selectors/router.selectors';
import { <%= featurePropertyName %>Feature } from '../../<%= featureFileName %>.reducers';
import {
  <%= featureClassName %>SearchCriteria,
  <%= featurePropertyName %>SearchCriteriasSchema,
} from './<%= featureFileName %>-search.parameters';
import { initialState } from './<%= featureFileName %>-search.reducers';
import { <%= featureClassName %>SearchViewModel } from './<%= featureFileName %>-search.viewmodel';

export const <%= featurePropertyName %>SearchSelectors = createChildSelectors(
  <%= featurePropertyName %>Feature.selectSearch,
  initialState
);

export const selectResults = createSelector(
  <%= featurePropertyName %>SearchSelectors.selectResults,
  (results): RowListGridData[] => {
    return results.map((item) => ({      
      ...item,
      imagePath: '',
      id: item.id,
      // ACTION S7: Create a mapping of the items and their corresponding translation keys
      // https://onecx.github.io/docs/nx-plugins/current/general/getting_started/search/configure-search-results.html#action-7
    }));
  }
);

export const selectDisplayedColumns = createSelector(
  <%= featurePropertyName %>SearchSelectors.selectColumns,
  (columns: DataTableColumn[] | undefined) => {
    return columns ?? [];
  }
);

export const select<%= featureClassName %>SearchViewModel = createSelector(
  <%= featurePropertyName %>SearchSelectors.selectColumns,
  <%= featurePropertyName %>SearchSelectors.selectCriteria,
  selectResults,  
  <%= featurePropertyName %>SearchSelectors.selectResultComponentState,
  <%= featurePropertyName %>SearchSelectors.selectSearchHeaderComponentState,
  <%= featurePropertyName %>SearchSelectors.selectDiagramComponentState,
  <%= featurePropertyName %>SearchSelectors.selectChartVisible,  
  <%= featurePropertyName %>SearchSelectors.selectSearchLoadingIndicator,
  <%= featurePropertyName %>SearchSelectors.selectSearchExecuted, 
  (
    columns,
    searchCriteria, 
    results,
    resultComponentState,
    searchHeaderComponentState,
    diagramComponentState,
    chartVisible,
    searchLoadingIndicator,
    searchExecuted
    ): <%= featureClassName %>SearchViewModel => ({
    columns,
    searchCriteria,
    results,
    resultComponentState,
    searchHeaderComponentState,
    diagramComponentState,
    chartVisible,
    searchLoadingIndicator,
    searchExecuted
  })
);
