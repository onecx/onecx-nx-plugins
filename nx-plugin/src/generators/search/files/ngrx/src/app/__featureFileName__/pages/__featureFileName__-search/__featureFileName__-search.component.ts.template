import { Component, Inject, OnInit, LOCALE_ID } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Store } from '@ngrx/store';
import {
  Action,
  BreadcrumbService,
  DataSortDirection,
  DataTableColumn,
  DiagramComponentState,
  DiagramType,
  ExportDataService,
  PortalDialogService,
  InteractiveDataViewComponentState,
  SearchHeaderComponentState,
} from '@onecx/portal-integration-angular';
import { <%= featureClassName %>SearchActions } from './<%= featureFileName %>-search.actions';
import {
  <%= featureClassName %>SearchCriteria,
  <%= featurePropertyName %>SearchCriteriasSchema,
} from './<%= featureFileName %>-search.parameters';
import { select<%= featureClassName %>SearchViewModel } from './<%= featureFileName %>-search.selectors';
import { <%= featureClassName %>SearchViewModel } from './<%= featureFileName %>-search.viewmodel';
import { first, Observable, map } from 'rxjs';
import { PrimeIcons } from 'primeng/api';
import { isValidDate } from '@onecx/accelerator';

@Component({
  selector: 'app-<%= featureFileName %>-search',
  templateUrl: './<%= featureFileName %>-search.component.html',
  styleUrls: ['./<%= featureFileName %>-search.component.scss'],
})

export class <%= featureClassName %>SearchComponent implements OnInit {
  viewModel$: Observable<<%= featureClassName %>SearchViewModel>  = this.store.select(select<%= featureClassName %>SearchViewModel);

  defaultDataSortDirection = DataSortDirection.NONE
  defaultDiagramType = DiagramType.PIE

  // ACTION S10: Update header actions: https://onecx.github.io/docs/nx-plugins/current/general/getting_started/search/update-header-actions.html#action-10
  headerActions$: Observable<Action[]> = this.viewModel$.pipe(map((vm) => {
      const actions: Action[] = [
        {
          labelKey: '<%= featureConstantName %>_SEARCH.HEADER_ACTIONS.EXPORT_ALL',
          icon: PrimeIcons.DOWNLOAD,
          titleKey: '<%= featureConstantName %>_SEARCH.HEADER_ACTIONS.EXPORT_ALL',
          show: 'asOverflow',
          actionCallback: () => this.exportItems(),
        },
        {
          labelKey: vm.chartVisible
            ? '<%= featureConstantName %>_SEARCH.HEADER_ACTIONS.HIDE_CHART'
            : '<%= featureConstantName %>_SEARCH.HEADER_ACTIONS.SHOW_CHART',
          icon: PrimeIcons.EYE,
          titleKey: vm.chartVisible
            ? '<%= featureConstantName %>_SEARCH.HEADER_ACTIONS.HIDE_CHART'
            : '<%= featureConstantName %>_SEARCH.HEADER_ACTIONS.SHOW_CHART',
          show: 'asOverflow',
          actionCallback: () => this.toggleChartVisibility(),
        },
      ]      
      return actions
    })
  );

  // ACTION S9: Select the column to be displayed in the diagram: https://onecx.github.io/docs/nx-plugins/current/general/getting_started/search/configure-result-diagram.html#action-3
  diagramColumnId = 'id';
  diagramColumn$ = this.viewModel$.pipe(map((vm) =>vm.columns.find((e) => e.id === this.diagramColumnId) as DataTableColumn));

  public <%= featurePropertyName %>SearchFormGroup: FormGroup = this.formBuilder.group(
    {
      ...Object.fromEntries(
        <%= featurePropertyName %>SearchCriteriasSchema
          .keyof()
          .options.map((k) => [k, null])
      ) as Record<keyof <%= featureClassName %>SearchCriteria, unknown>,
    } satisfies Record<keyof <%= featureClassName %>SearchCriteria, unknown>,
  );

  constructor(
    private readonly breadcrumbService: BreadcrumbService,
    private readonly store: Store,
    private readonly formBuilder: FormBuilder,
    @Inject(LOCALE_ID) public readonly locale: string,
    private readonly exportDataService: ExportDataService,
  ) {
  }

  ngOnInit() {
    this.breadcrumbService.setItems([
      {
        titleKey: '<%= featureConstantName %>_SEARCH.BREADCRUMB',
        labelKey: '<%= featureConstantName %>_SEARCH.BREADCRUMB',
        routerLink: '/<%= featureFileName %>',
      },
    ]);
    this.viewModel$.subscribe((vm) =>
      this.<%= featurePropertyName %>SearchFormGroup.patchValue(vm.searchCriteria),
    );
  }

  resultComponentStateChanged(state: InteractiveDataViewComponentState) {    
    this.store.dispatch(<%= featureClassName %>SearchActions.resultComponentStateChanged(state))
  }

  searchHeaderComponentStateChanged(state: SearchHeaderComponentState) {
    this.store.dispatch(<%= featureClassName %>SearchActions.searchHeaderComponentStateChanged(state))
  }

  diagramComponentStateChanged(state: DiagramComponentState) {
    this.store.dispatch(<%= featureClassName %>SearchActions.diagramComponentStateChanged(state))
  }

  search(formValue: FormGroup) {
    const searchCriteria = Object.entries(formValue.getRawValue()).reduce(
      (acc: Partial<<%= featureClassName %>SearchCriteria>, [key, value]) => ({
        ...acc,
        [key]: isValidDate(value)
          ? new Date(
              Date.UTC(
                value.getFullYear(),
                value.getMonth(),
                value.getDate(),
                value.getHours(),
                value.getMinutes(),
                value.getSeconds()
              )
            )
          : value || undefined,
      }),
      {}
    );
    this.store.dispatch(
      <%= featureClassName %>SearchActions.searchButtonClicked({ searchCriteria })
    );
  }

  resetSearch() {
    this.store.dispatch(<%= featureClassName %>SearchActions.resetButtonClicked());
  }


  exportItems() {
    this.store.dispatch(<%= featureClassName %>SearchActions.exportButtonClicked());
  }   

  toggleChartVisibility() {
    this.store.dispatch(<%= featureClassName %>SearchActions.chartVisibilityToggled());
  }
}