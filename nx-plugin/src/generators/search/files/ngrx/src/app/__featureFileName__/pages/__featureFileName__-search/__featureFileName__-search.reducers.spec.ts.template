import {
  DiagramType,
  GroupByCountDiagramComponentState,
  InteractiveDataViewComponentState,
  SearchHeaderComponentState
} from '@onecx/angular-accelerator'
import { <%= featureClassName %>SearchActions } from './<%= featureFileName %>-search.actions'
import * as reducers from './<%= featureFileName %>-search.reducers'

describe('<%= featureClassName %>SearchReducer', () => {
  it('should reset results and criteria on resetButtonClicked', () => {
    const preState = { ...reducers.initialState, results: [{ id: '1' }], criteria: { changeMe: 'val' } }
    const action = <%= featureClassName %>SearchActions.resetButtonClicked()
    const state = reducers.<%= featurePropertyName %>SearchReducer(preState, action)
    expect(state.results).toEqual([])
    expect(state.criteria).toEqual({})
  })

  it('should set searchLoadingIndicator and criteria on searchButtonClicked', () => {
    const searchCriteria = { changeMe: 'foo' }
    const action = <%= featureClassName %>SearchActions.searchButtonClicked({ searchCriteria })
    const state = reducers.<%= featurePropertyName %>SearchReducer(reducers.initialState, action)
    expect(state.searchLoadingIndicator).toBe(true)
    expect(state.criteria).toEqual(searchCriteria)
  })

  it('should set results on <%= featurePropertyName %>SearchResultsReceived', () => {
    const stream = [{ id: '1' }, { id: '2' }]
    const action = <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsReceived({
      stream,
      size: 2,
      number: 0,
      totalElements: 2,
      totalPages: 1
    })
    const state = reducers.<%= featurePropertyName %>SearchReducer(reducers.initialState, action)
    expect(state.results).toEqual(stream)
  })

  it('should clear results on <%= featurePropertyName %>SearchResultsLoadingFailed', () => {
    const preState = { ...reducers.initialState, results: [{ id: '1' }] }
    const action = <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsLoadingFailed({ error: null })
    const state = reducers.<%= featurePropertyName %>SearchReducer(preState, action)
    expect(state.results).toEqual([])
  })

  it('should toggle chartVisible on chartVisibilityToggled', () => {
    const initialStateWithChartHidden = { ...reducers.initialState, chartVisible: false }
    const action = <%= featureClassName %>SearchActions.chartVisibilityToggled()
    let state = reducers.<%= featurePropertyName %>SearchReducer(initialStateWithChartHidden, action)
    expect(state.chartVisible).toBe(true)

    const stateWithChartVisible = { ...reducers.initialState, chartVisible: true }
    state = reducers.<%= featurePropertyName %>SearchReducer(stateWithChartVisible, action)
    expect(state.chartVisible).toBe(false)
  })

  it('should update resultComponentState when resultComponentStateChanged', () => {
    const newComponentState: InteractiveDataViewComponentState = {}
    const action = <%= featureClassName %>SearchActions.resultComponentStateChanged(newComponentState)
    const state = reducers.<%= featurePropertyName %>SearchReducer(reducers.initialState, action)
    expect(state.resultComponentState).toBeDefined()
    expect(state).not.toBe(reducers.initialState)
  })

  it('should update searchHeaderComponentState when searchHeaderComponentStateChanged', () => {
    const newHeaderState: SearchHeaderComponentState = {
      activeViewMode: 'basic',
      selectedSearchConfig: 'config1'
    }
    const action = <%= featureClassName %>SearchActions.searchHeaderComponentStateChanged(newHeaderState)
    const state = reducers.<%= featurePropertyName %>SearchReducer(reducers.initialState, action)
    expect(state.searchHeaderComponentState).toBeDefined()
    if (state.searchHeaderComponentState) {
      expect(state.searchHeaderComponentState.activeViewMode).toBe('basic')
      expect(state.searchHeaderComponentState.selectedSearchConfig).toBe('config1')
    }
    expect(state).not.toBe(reducers.initialState)
  })

  it('should update diagramComponentState when diagramComponentStateChanged', () => {
    const newDiagramState: GroupByCountDiagramComponentState = {
      activeDiagramType: DiagramType.PIE
    }
    const action = <%= featureClassName %>SearchActions.diagramComponentStateChanged(newDiagramState)
    const state = reducers.<%= featurePropertyName %>SearchReducer(reducers.initialState, action)
    expect(state.diagramComponentState).toBeDefined()
    if (state.diagramComponentState) {
      expect(state.diagramComponentState.activeDiagramType).toBe('PIE')
    }
    expect(state).not.toBe(reducers.initialState)
  })

  it('should set criteria and searchLoadingIndicator=true when routerNavigatedAction succeeds and queryParams present', () => {
    const { routerNavigatedAction } = require('@ngrx/router-store')
    const mockSchema = require('./<%= featureFileName %>-search.parameters')
    jest.spyOn(mockSchema.<%= featurePropertyName %>SearchCriteriasSchema, 'safeParse').mockReturnValue({
      success: true,
      data: { foo: 'bar' }
    })
    const preState = { ...reducers.initialState, criteria: {}, searchLoadingIndicator: false }
    const action = routerNavigatedAction({ payload: { routerState: { root: { queryParams: { foo: 'bar' } } } } })
    const state = reducers.<%= featurePropertyName %>SearchReducer(preState, action)
    expect(state.criteria).toEqual({ foo: 'bar' })
    expect(state.searchLoadingIndicator).toBe(true)
  })

  it('should not change state when routerNavigatedAction fails schema parse', () => {
    const { routerNavigatedAction } = require('@ngrx/router-store')
    const mockSchema = require('./<%= featureFileName %>-search.parameters')
    jest.spyOn(mockSchema.<%= featurePropertyName %>SearchCriteriasSchema, 'safeParse').mockReturnValue({
      success: false
    })
    const preState = { ...reducers.initialState, criteria: { changeMe: 'bar' }, searchLoadingIndicator: true }
    const action = routerNavigatedAction({ payload: { routerState: { root: { queryParams: { foo: 'bar' } } } } })
    const state = reducers.<%= featurePropertyName %>SearchReducer(preState, action)
    expect(state).toBe(preState)
  })
})