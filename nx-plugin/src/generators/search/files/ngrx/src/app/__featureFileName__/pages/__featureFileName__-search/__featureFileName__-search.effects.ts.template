import { Injectable } from '@angular/core'
import { ActivatedRoute, Router } from '@angular/router'
import { Actions, createEffect, ofType } from '@ngrx/effects'
import { concatLatestFrom } from '@ngrx/operators'
import { routerNavigatedAction } from '@ngrx/router-store'
import { Action, Store } from '@ngrx/store'
import { filterForNavigatedTo, filterOutQueryParamsHaveNotChanged } from '@onecx/ngrx-accelerator'
import { DialogState, ExportDataService, PortalDialogService, PortalMessageService } from '@onecx/portal-integration-angular'
import equal from 'fast-deep-equal'
import { PrimeIcons } from 'primeng/api'
import { catchError, map, mergeMap, of, switchMap, tap } from 'rxjs'
import { selectUrl } from 'src/app/shared/selectors/router.selectors'
import { <%= featureClassName %>, 
  Create<%= featureClassName %>Request,
  Update<%= featureClassName %>Request, 
  <%= featureClassName %>BffService 
} from '../../../shared/generated';
import { <%= featureClassName %>SearchActions } from './<%= featureFileName %>-search.actions'
import { <%= featureClassName %>SearchComponent } from './<%= featureFileName %>-search.component'
import { <%= featurePropertyName %>SearchCriteriasSchema } from './<%= featureFileName %>-search.parameters'
import { <%= featurePropertyName %>SearchSelectors, select<%= featureClassName %>SearchViewModel } from './<%= featureFileName %>-search.selectors'
import { <%= featureClassName %>CreateUpdateComponent } from './dialogs/<%= featureFileName %>-create-update/<%= featureFileName %>-create-update.component'
type <%= featureClassName %>SearchResponse = any

@Injectable()
export class <%= featureClassName %>SearchEffects {
  [x: string]: any
  constructor(
    private portalDialogService: PortalDialogService,
    private actions$: Actions,
    private route: ActivatedRoute,
    private service: <%= serviceName %>,
    private router: Router,
    private store: Store,
    private messageService: PortalMessageService,
    private readonly exportDataService: ExportDataService,
  ) {}

  syncParamsToUrl$ = createEffect(
    () => {
      return this.actions$.pipe(
        ofType(<%= featureClassName %>SearchActions.searchButtonClicked, <%= featureClassName %>SearchActions.resetButtonClicked),
        concatLatestFrom(() => [this.store.select(<%= featurePropertyName %>SearchSelectors.selectCriteria), this.route.queryParams]),
        tap(([, criteria, queryParams]) => {
          const results = <%= featurePropertyName %>SearchCriteriasSchema.safeParse(queryParams)
          if (!results.success || !equal(criteria, results.data)) {
            const params = {
              ...criteria
            }
            this.router.navigate([], {
              relativeTo: this.route,
              queryParams: params,
              replaceUrl: true,
              onSameUrlNavigation: 'ignore'
            })
          }
        })
      )
    },
    { dispatch: false }
  )

  detailsButtonClicked$ = createEffect(
    () => {
      return this.actions$.pipe(
        ofType(<%= featureClassName %>SearchActions.detailsButtonClicked),
        concatLatestFrom(() => this.store.select(selectUrl)),
        tap(([action, currentUrl]) => {
          const urlTree = this.router.parseUrl(currentUrl)
          urlTree.queryParams = {}
          urlTree.fragment = null
          this.router.navigate([urlTree.toString(), 'details', action.id])
        })
      )
  },
  { dispatch: false }
  )
  searchByUrl$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(routerNavigatedAction),
      filterForNavigatedTo(this.router, <%= featureClassName %>SearchComponent),
      filterOutQueryParamsHaveNotChanged(this.router, <%= featurePropertyName %>SearchCriteriasSchema, false),
      concatLatestFrom(() => this.store.select(<%= featurePropertyName %>SearchSelectors.selectCriteria)),
      switchMap(([, searchCriteria]) => this.performSearch(searchCriteria))
    )
  })

  refreshSearchAfterCreateUpdate$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= featureClassName %>SearchActions.createSucceeded),
      concatLatestFrom(() => this.store.select(<%= featurePropertyName %>SearchSelectors.selectCriteria)),
      switchMap(([, searchCriteria]) => this.performSearch(searchCriteria))
    )
  })

  editButtonClicked$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= featureClassName %>SearchActions.editButtonClicked),
      concatLatestFrom(() => this.store.select(<%= featurePropertyName %>SearchSelectors.selectResults)),
      map(([action, results]) => 
      {return results.find((item) => item.id == action.id)}),
      mergeMap((itemToEdit) =>
        this.portalDialogService.openDialog<<%= featureClassName %> | undefined>(
          '<%= featureClassName %>_CREATE_UPDATE.UPDATE.HEADER',
          {
            type: <%= featureClassName %>CreateUpdateComponent,
            inputs: { vm: { itemToEdit } }
          },
          '<%= featureClassName %>_CREATE_UPDATE.UPDATE.FORM.SAVE',
          '<%= featureClassName %>_CREATE_UPDATE.UPDATE.FORM.CANCEL',
          { baseZIndex: 100 }
        )
      ),
      switchMap((dialogResult) => {
        if (!dialogResult || dialogResult.button == 'secondary') {
          return of(<%= featureClassName %>SearchActions.updateCancelled())
        }
        const result = dialogResult?.result as <%= featureClassName %> | undefined
        if (!result) {
          return of(<%= featureClassName %>SearchActions.updateFailed({ error: 'Item is required for update!' }))
        }

        const id = result.id
        if (!id) {
          return of(<%= featureClassName %>SearchActions.updateFailed({ error: 'Item ID is required for update!' }))
        }

        const updateRequest: Update<%= featureClassName %>Request = { dataObject: result }
        return this.service.update<%= featureClassName %>(id as string, updateRequest).pipe(
          map(() => {
            this.messageService.success({ summaryKey: '<%= featureClassName %>_CREATE_UPDATE.UPDATE.SUCCESS' })
            return <%= featureClassName %>SearchActions.updateSucceeded()
          }),
          catchError((error) => {
            this.messageService.error({ summaryKey: '<%= featureClassName %>_CREATE_UPDATE.UPDATE.ERROR' })
            return of(<%= featureClassName %>SearchActions.updateFailed({ error }))
          })
        )
      })
    )
  })
  createButtonClicked$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= featureClassName %>SearchActions.createButtonClicked),
      switchMap(() =>
        this.portalDialogService.openDialog<<%= featureClassName %> | undefined>(
          '<%= featureClassName %>_CREATE_UPDATE.CREATE.HEADER',
          {
            type: <%= featureClassName %>CreateUpdateComponent,
            inputs: {
              vm: { itemToEdit: {} }
            }
          },
          '<%= featureClassName %>_CREATE_UPDATE.CREATE.FORM.SAVE',
          '<%= featureClassName %>_CREATE_UPDATE.CREATE.FORM.CANCEL',
          { baseZIndex: 100 }
        )
      ),
      switchMap((dialogResult) => {
        if (!dialogResult || dialogResult.button == 'secondary') {
          return of(<%= featureClassName %>SearchActions.createCancelled())
        }
        if (!dialogResult?.result) {
          return of(<%= featureClassName %>SearchActions.createFailed({ error: 'DialogResult was not set as expected!' }))
        }
        const toCreateItem: Create<%= featureClassName %>Request = { dataObject: dialogResult.result }
        return this.service.create<%= featureClassName %>(toCreateItem).pipe(
          map(() => {
            this.messageService.success({ summaryKey: '<%= featureClassName %>_CREATE_UPDATE.CREATE.SUCCESS' })
            return <%= featureClassName %>SearchActions.createSucceeded()
          }),
          catchError((error) => {
            this.messageService.error({ summaryKey: '<%= featureClassName %>_CREATE_UPDATE.CREATE.ERROR' })
            return of(<%= featureClassName %>SearchActions.createFailed({ error }))
          })
        )
      })
    )
  })

  refreshSearchAfterDelete$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= featureClassName %>SearchActions.deleteSucceeded),
      concatLatestFrom(() => this.store.select(<%= featurePropertyName %>SearchSelectors.selectCriteria)),
      switchMap(([, searchCriteria]) => this.performSearch(searchCriteria))
    )
  })

  deleteButtonClicked$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= featureClassName %>SearchActions.deleteButtonClicked),
      concatLatestFrom(() => this.store.select(<%= featurePropertyName %>SearchSelectors.selectResults)),
      map(([action, results]) => (results as <%= featureClassName %>[]).find((i) => i.id == action.id)),
      mergeMap((itemToDelete) =>
        this.portalDialogService
          .openDialog<unknown>(
            '<%= featureClassName %>_DELETE.HEADER',
            '<%= featureClassName %>_DELETE.MESSAGE',
            { key: '<%= featureClassName %>_DELETE.CONFIRM', icon: PrimeIcons.CHECK },
            { key: '<%= featureClassName %>_DELETE.CANCEL', icon: PrimeIcons.TIMES }
          )
          .pipe(map((state): [DialogState<unknown>, <%= featureClassName %> | undefined] => [state, itemToDelete]))
      ),
      switchMap(([dialogResult, itemToDelete]) => {
        if (!dialogResult || dialogResult.button == 'secondary') {
          return of(<%= featureClassName %>SearchActions.deleteCancelled())
        }
        if (!itemToDelete?.id) {
          this.messageService.error({ summaryKey: '<%= featureClassName %>_DELETE.ERROR' })
          return of(<%= featureClassName %>SearchActions.deleteFailed({ error: 'Item to delete or its ID not found!' }))
        }

        return this.service.delete<%= featureClassName %>(itemToDelete.id).pipe(
          map(() => {
            this.messageService.success({ summaryKey: '<%= featureClassName %>_DELETE.SUCCESS' })
            return <%= featureClassName %>SearchActions.deleteSucceeded()
          }),
          catchError((error) => {
            this.messageService.error({ summaryKey: '<%= featureClassName %>_DELETE.ERROR' })
            return of(<%= featureClassName %>SearchActions.deleteFailed({ error }))
          })
        )
      })
    )
  })
    
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  performSearch(searchCriteria: Record<string, any>) {
    return this.service
      .search<%= featureClassName %>s({
        ...Object.entries(searchCriteria).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: value instanceof Date ? value.toISOString() : value
          }),
          {}
        )
      })
      .pipe(
        map((response: <%= featureClassName %>SearchResponse) =>
          <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsReceived({
            stream: response.results,
            size: response.results.length,
            number: 1,
            totalElements: response.totalNumberOfResults,
            totalPages: 1
          })
        ),
        catchError((error) =>
          of(<%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsLoadingFailed({ error }))
        )
      )
  }

  exportData$ = createEffect(
    () => {
      return this.actions$.pipe(
        ofType(<%= featureClassName %>SearchActions.exportButtonClicked),
        concatLatestFrom(() => this.store.select(select<%= featureClassName %>SearchViewModel)),
        map(([, viewModel]) => {
          this.exportDataService.exportCsv(
            viewModel.resultComponentState?.displayedColumns ?? [],
            viewModel.results,
            '<%= featureClassName %>.csv'
          )
        })
      )
    },
    { dispatch: false }
  )

  errorMessages: { action: Action; key: string }[] = [
    {
      action: <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsLoadingFailed,
      key: '<%= featureClassName %>_SEARCH.ERROR_MESSAGES.SEARCH_RESULTS_LOADING_FAILED'
    }
  ]

  displayError$ = createEffect(
    () => {
      return this.actions$.pipe(
        tap((action) => {
          const e = this.errorMessages.find((e) => e.action.type === action.type)
          if (e) {
            this.messageService.error({ summaryKey: e.key })
          }
        })
      )
    },
    { dispatch: false }
  )
}