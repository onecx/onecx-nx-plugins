import { ActivatedRoute, Router, RoutesRecognized } from '@angular/router';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { concatLatestFrom } from '@ngrx/operators'
import { routerNavigatedAction } from '@ngrx/router-store';
import { catchError, map, of, switchMap, tap, filter, mergeMap } from 'rxjs';
import {  
  <%= serviceName %>, 
} from '../../../shared/generated';
import { <%= featureClassName %>SearchActions } from './<%= featureFileName %>-search.actions';
import { <%= featureClassName %>SearchComponent } from './<%= featureFileName %>-search.component';
import { ExportDataService, PortalMessageService } from '@onecx/portal-integration-angular';
import {
  createQueryParamsEffect,
  filterForNavigatedTo,
  filterOutQueryParamsHaveNotChanged
} from '@onecx/ngrx-accelerator';
import {  
  <%= featurePropertyName %>SearchCriteriasSchema,
} from './<%= featureFileName %>-search.parameters';
import { Injectable, SkipSelf } from '@angular/core';
import { 
  select<%= featureClassName %>SearchViewModel,
<%= featurePropertyName %>SearchSelectors,
} from './<%= featureFileName %>-search.selectors';
import { Action, Store } from '@ngrx/store';
import equal from 'fast-deep-equal';

@Injectable()
export class <%= featureClassName %>SearchEffects {
  constructor(
    private actions$: Actions,
    private route: ActivatedRoute,
    private <%= featurePropertyName %>Service: <%= serviceName %>,    
    private router: Router,
    private store: Store,
    private messageService: PortalMessageService,  
    private readonly exportDataService: ExportDataService
  ) {}

  syncParamsToUrl$ = createEffect(
    () => {
      return this.actions$.pipe(
        ofType(
          <%= featureClassName %>SearchActions.searchButtonClicked,
          <%= featureClassName %>SearchActions.resetButtonClicked,
        ),
        concatLatestFrom(() => [
          this.store.select(<%= featurePropertyName %>SearchSelectors.selectCriteria),
          this.route.queryParams,
        ]),
        tap(([, criteria, queryParams]) => {
          const results =
            <%= featurePropertyName %>SearchCriteriasSchema.safeParse(queryParams);
          if (!results.success || !equal(criteria, results.data)) {
            const params = {
              ...criteria,
              //TODO: Move to docs to explain how to only put the date part in the URL in case you have date and not datetime
              //exampleDate: criteria.exampleDate?.toISOString()?.slice(0, 10)
            };
            this.router.navigate([], {
              relativeTo: this.route,
              queryParams: params,
              replaceUrl: true,
              onSameUrlNavigation: 'ignore',
            });
          }
        }),
      );
    },
    { dispatch: false },
  );

  searchByUrl$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(routerNavigatedAction),
      filterForNavigatedTo(this.router, <%= featureClassName %>SearchComponent),
      filterOutQueryParamsHaveNotChanged(this.router, <%= featurePropertyName %>SearchCriteriasSchema, false),      
      concatLatestFrom(() =>
        this.store.select(<%= featurePropertyName %>SearchSelectors.selectCriteria),
      ),
      switchMap(([,searchCriteria]) => this.performSearch(searchCriteria)),
    );
  });

  performSearch(searchCriteria: Record<string, any>) {
    return this.<%= featurePropertyName %>Service.search<%= dataObjectName %>s(
      {
        ...Object.entries(searchCriteria).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: value instanceof Date ? value.toISOString() : value,
          }),
          {},
        ),
      }
    ).pipe(
          map(({ stream, size, number, totalElements, totalPages}) =>
            <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsReceived(
              {
                stream,
                size,
                number,
                totalElements,
                totalPages
              }
            )
          ),
          catchError((error) =>
            of(
              <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsLoadingFailed(
                {
                  error,
                }
              )
            )
          )
        )
  }

  exportData$ = createEffect(
    () => {
      return this.actions$.pipe(
        ofType(<%= featureClassName %>SearchActions.exportButtonClicked),
        concatLatestFrom(() =>
          this.store.select(select<%= featureClassName %>SearchViewModel)
        ),
        map(([, viewModel]) => {
          this.exportDataService.exportCsv(
            viewModel.resultComponentState?.displayedColumns ?? [],
            viewModel.results,
            '<%= featureClassName %>.csv'
          );
        })
      );
    },
    { dispatch: false }
  );

  errorMessages: { action: Action; key: string }[] = [
    {
      action:
        <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsLoadingFailed,
      key: '<%= featureConstantName %>_SEARCH.ERROR_MESSAGES.SEARCH_RESULTS_LOADING_FAILED',
    }
  ];

  displayError$ = createEffect(
    () => {
      return this.actions$.pipe(
        tap((action) => {
          const e = this.errorMessages.find(
            (e) => e.action.type === action.type
          );
          if (e) {
            this.messageService.error({ summaryKey: e.key });
          }
        })
      );
    },
    { dispatch: false }
  );
}