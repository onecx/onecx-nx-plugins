import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ActivatedRoute } from '@angular/router';
import { LetDirective } from '@ngrx/component';
import { HttpClientTestingModule } from '@angular/common/http/testing'
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { By } from '@angular/platform-browser';
import { MockStore, provideMockStore } from '@ngrx/store/testing';
import { Store, StoreModule } from '@ngrx/store';
import { TranslateService } from '@ngx-translate/core';
import { TranslateTestingModule } from 'ngx-translate-testing'
import { PrimeIcons } from 'primeng/api';
import { of } from 'rxjs';
import {
  BreadcrumbService,
  HAS_PERMISSION_CHECKER,
  PortalCoreModule,
  UserService,
} from '@onecx/portal-integration-angular';
import { <%= featureClassName %>DetailsComponent } from './<%= featureFileName %>-details.component';
import { initialState } from './<%= featureFileName %>-details.reducers';
import { <%= featureClassName %>DetailsHarness } from './<%= featureFileName %>-details.harness';
import { <%= featureClassName %>DetailsViewModel } from './<%= featureFileName %>-details.viewmodel';
import { select<%= featureClassName %>DetailsViewModel } from './<%= featureFileName %>-details.selectors';
import { <%= featureClassName %>DetailsActions } from './<%= featureFileName %>-details.actions';
import { ofType } from '@ngrx/effects';
import { provideUserServiceMock } from '@onecx/angular-integration-interface/mocks';
import { TranslatePipe } from '@ngx-translate/core';

describe('<%= featureClassName %>DetailsComponent', () => {
  const origAddEventListener = window.addEventListener;
  const origPostMessage = window.postMessage;

  let listeners: any[] = [];
  window.addEventListener = (_type: any, listener: any) => {
    listeners.push(listener);
  };

  window.removeEventListener = (_type: any, listener: any) => {
    listeners = listeners.filter((l) => l !== listener);
  };

  window.postMessage = (m: any) => {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    listeners.forEach((l) =>
      l({
        data: m,
        stopImmediatePropagation: () => {},
        stopPropagation: () => {},
      })
    );
  };

  afterAll(() => {
    window.addEventListener = origAddEventListener;
    window.postMessage = origPostMessage;
  });


  let component: <%= featureClassName %>DetailsComponent;
  let fixture: ComponentFixture<<%= featureClassName %>DetailsComponent>;
  let store: MockStore<Store>;
  let breadcrumbService: BreadcrumbService;
  let <%= featurePropertyName %>Details: <%= featureClassName %>DetailsHarness;

  const mockActivatedRoute = {
    snapshot: {
      data: {},
    },
  };
  const base<%= featureClassName %>DetailsViewModel: <%= featureClassName %>DetailsViewModel = {
    details: undefined,
    detailsLoadingIndicator: false,
    detailsLoaded: true,
    backNavigationPossible: true
  };

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [<%= featureClassName %>DetailsComponent],
      imports: [
        PortalCoreModule,
        LetDirective,
        TranslateTestingModule.withTranslations('en', require('./../../../../assets/i18n/en.json'))
          .withTranslations('de', require('./../../../../assets/i18n/de.json')),
        HttpClientTestingModule
      ],
      providers: [
        provideMockStore({
          initialState: { <%= featurePropertyName %>: { details: initialState } },
        }),
        BreadcrumbService,
        { provide: ActivatedRoute, useValue: mockActivatedRoute },
        provideUserServiceMock(),
        {
            provide: HAS_PERMISSION_CHECKER,
            useExisting: UserService,
        },
      ],
    }).compileComponents();

    const userService = TestBed.inject(UserService);
    userService.permissions$.next([
      "<%= featureConstantName %>#CREATE",
      "<%= featureConstantName %>#EDIT",
      "<%= featureConstantName %>#DELETE",
      "<%= featureConstantName %>#IMPORT",
      "<%= featureConstantName %>#EXPORT",
      "<%= featureConstantName %>#VIEW",
      "<%= featureConstantName %>#SEARCH",
      "<%= featureConstantName %>#BACK"
    ])
    const translateService = TestBed.inject(TranslateService);
    translateService.use('en');

    store = TestBed.inject(MockStore);
    store.overrideSelector(
      select<%= featureClassName %>DetailsViewModel,
      base<%= featureClassName %>DetailsViewModel
    );
    store.refreshState();

    fixture = TestBed.createComponent(<%= featureClassName %>DetailsComponent);
    component = fixture.componentInstance;
    breadcrumbService = TestBed.inject(BreadcrumbService);
    fixture.detectChanges();
    <%= featurePropertyName %>Details = await TestbedHarnessEnvironment.harnessForFixture(
      fixture,
      <%= featureClassName %>DetailsHarness
    );
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should display correct breadcrumbs', async () => {
    jest.spyOn(breadcrumbService, 'setItems');

    component.ngOnInit();
    fixture.detectChanges();

    expect(breadcrumbService.setItems).toHaveBeenCalledTimes(1);
    const pageHeader = await <%= featurePropertyName %>Details.getHeader();
    const searchBreadcrumbItem = await pageHeader.getBreadcrumbItem('Details');
    expect(await searchBreadcrumbItem!.getText()).toEqual('Details');
  });

  it('should display translated headers', async () => {
    const pageHeader = await <%= featurePropertyName %>Details.getHeader();
    expect(await pageHeader.getHeaderText()).toEqual('<%= featureClassName %> Details');
    expect(await pageHeader.getSubheaderText()).toEqual(
      'Display of <%= featureClassName %> Details'
    );
  });

  it('should have 2 inline actions', async () => {
    const pageHeader = await <%= featurePropertyName %>Details.getHeader();
    const inlineActions = await pageHeader.getInlineActionButtons();
    expect(inlineActions.length).toBe(2);

    const backAction = await pageHeader.getInlineActionButtonByLabel('Back');
    expect(backAction).toBeTruthy();

    const moreAction = await pageHeader.getInlineActionButtonByIcon(
      PrimeIcons.ELLIPSIS_V
    );
    expect(moreAction).toBeTruthy();
  });

  it('should dispatch navigateBackButtonClicked action on back button click', async () => {
    jest.spyOn(window.history, 'back');
    const doneFn = jest.fn();

    const pageHeader = await <%= featurePropertyName %>Details.getHeader();
    const backAction = await pageHeader.getInlineActionButtonByLabel('Back');
    store.scannedActions$
      .pipe(ofType(<%= featureClassName %>DetailsActions.navigateBackButtonClicked))
      .subscribe(() => {
        doneFn();
      });
    await backAction?.click();
    expect(doneFn).toHaveBeenCalledTimes(1);
  });

  it('should display item details in page header', async () => {
    component.headerLabels$ = of([
       {
        label: 'HELLO_DETAILS.FORM.ID',
        labelPipe: TranslatePipe,
        value: 'test id',
      },
      {
        label: 'first',
        value: 'first value',
      },
      {
        label: 'second',
        value: 'second value',
      },
      {
        label: 'third',
        icon: PrimeIcons.PLUS,
      },
      {
        label: 'fourth',
        value: 'fourth value',
        icon: PrimeIcons.QUESTION,
      },
    ]);

    const pageHeader = await <%= featurePropertyName %>Details.getHeader();
    const objectDetails = await pageHeader.getObjectInfos();
    expect(objectDetails.length).toBe(5);

    const testDetailItem = await pageHeader.getObjectInfoByLabel('HELLO_DETAILS.FORM.ID');
    expect(await testDetailItem?.getLabel()).toEqual('HELLO_DETAILS.FORM.ID');
    expect(await testDetailItem?.getValue()).toEqual('test id');
    expect(await testDetailItem?.getIcon()).toBeUndefined();

    const firstDetailItem = await pageHeader.getObjectInfoByLabel('first');
    expect(await firstDetailItem?.getLabel()).toEqual('first');
    expect(await firstDetailItem?.getValue()).toEqual('first value');
    expect(await firstDetailItem?.getIcon()).toBeUndefined();

    const secondDetailItem = await pageHeader.getObjectInfoByLabel('second');
    expect(await secondDetailItem?.getLabel()).toEqual('second');
    expect(await secondDetailItem?.getValue()).toEqual('second value');
    expect(await secondDetailItem?.getIcon()).toBeUndefined();

    const thirdDetailItem = await pageHeader.getObjectInfoByLabel('third');
    expect(await thirdDetailItem?.getLabel()).toEqual('third');
    expect(await thirdDetailItem?.getValue()).toEqual('');
    expect(await thirdDetailItem?.getIcon()).toEqual(PrimeIcons.PLUS);

    const fourthDetailItem = await pageHeader.getObjectInfoByLabel('fourth');
    expect(await fourthDetailItem?.getLabel()).toEqual('fourth');
    expect(await fourthDetailItem?.getValue()).toEqual('fourth value');
    expect(await fourthDetailItem?.getIcon()).toEqual(PrimeIcons.QUESTION);
  });
});
